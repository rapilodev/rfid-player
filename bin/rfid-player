#!/usr/bin/perl

use warnings;
use strict;
use File::Basename qw(dirname);
use Time::HiRes qw(sleep);
use IO::Select();

$| = 1;

my $dirname = dirname(__FILE__);
chdir $dirname;

my $card_status = "/proc/asound/card0/pcm0p/sub0/hw_params";

sub get_url {
    my $file = shift;
    for my $line ( split /\n/, qx{cat $file} ) {
        return $line if $line =~ /^http:/;
    }
    return ();
}

sub find {
    my $pattern = shift;
    my @files   = glob($pattern);
    return unless @files;
    my $file = shift @files;
    print "found file=$file\n";
    return $file;
}

sub play {
    my $file = shift;
    return until $file;

    while ( system("grep 'closed' $card_status") and $? ) {
        system "pkill -f ffmpeg";
        sleep 0.1;
    }

    my $options = "-hide_banner -loglevel error";
    my $output  = "alsa default";
    my $cmd     = "ffmpeg $options -i $file -f $output";
    print "$cmd\n";
    system( $cmd . " &" );
}

play( find("start/*") );

open my $cmd, 'python3 rfid-reader |' or die $!;
while ( my $select = IO::Select->new($cmd) ) {

    foreach my $fh ( $select->can_read(3600) ) {
        sysread $fh, my $buffer, 1024;
        my @requests = split "\n", $buffer;
        my $rfid     = $requests[-1];
        $rfid =~ s/[^0-9]//g;
        next unless $rfid;

        unless ( -d $rfid ) {
            print "create slot for new card $rfid\n";
            mkdir $rfid;
            chmod 0777, $rfid;
            next;
        }

        my $file = find("$rfid/*");
        next unless $file;

        $file = get_url($file) if $file =~ /\.m3u$/;
        next unless $file;

        if ( $file =~ /\.sh$/ ) {
            system("sh $file");
            next;
        } else {
            play("'$file'");
        }
    }
}
close $cmd or die;
