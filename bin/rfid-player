#!/usr/bin/perl

use warnings;
use strict;
use feature 'state';

use File::Basename qw(dirname);
use Time::HiRes qw(sleep time);
use IO::Select();
use POSIX ":sys_wait_h";
$| = 1;

my $card_status = "/proc/asound/card0/pcm0p/sub0/hw_params";
my $dirname = dirname(__FILE__);
chdir $dirname;
my $PID = $$;
local $SIG{USR1} = sub { handle('NEXT') if $$ == $PID; };

sub play {
    my $file = shift;
    $file = $file->[0] if ref($file) eq 'ARRAY';
    return until $file;

    while ( system("grep 'closed' $card_status") and $? ) {
        system "pkill -f ffmpeg";
        sleep 0.1;
    }

    if ( ( fork // die("failed to fork: $!") ) == 0 ) {
        my @cmd = (
            '/usr/bin/ffmpeg', '-hide_banner', '-loglevel', 'error',
            '-f',              'alsa',         'default',   '-i',
            $file
        );
        if ( my $pid = open( my $fh, "-|", @cmd ) or die $! ) {
            waitpid $pid, 0;
            kill 'USR1', $PID unless $?;
            exit $?;
        }
        exit 0;    # child
    }
}

sub create {
    my ($rfid) = @_;
    print "create slot for new card $rfid\n";
    mkdir $rfid or die "cannot create $rfid, $!";
    chmod 0777, $rfid;
    unlink "newest" if -l "newest";
    symlink $rfid, "newest";
}

sub get_url {
    my $file = shift;
    for my $line ( split /\n/, qx{cat $file} ) {
        return $line if $line =~ /^http:/;
    }
    return ();
}

sub handle {
    my ($rfid) = @_;
    state $nexts = [];
    state $prevs = [];

    return unless $rfid;
    my @files = glob "$rfid/*";
    my $file  = ( shift @files ) // '';
    if (    ( $rfid eq 'NEXT' or $file =~ m{\/NEXT$} )
        and @$nexts > 0
        and ( my $next = shift @$nexts ) )
    {
        push @$prevs, $next;
        play $prevs->[-1];
    } elsif ( ( $rfid eq 'PREV' or $file =~ m{\/PREV$} ) and ( @$prevs > 1 ) ) {
        unshift @$nexts, pop @$prevs;
        play $prevs->[-1] if $prevs;
    } elsif ( $file !~ m/\/(PREV|NEXT)$/ ) {
        return unless $file;
        return system("sh $file") if $file =~ /\.sh$/;
        $file = get_url $file if $file =~ /\.m3u$/;
        return unless $file;
        $prevs = [$file];
        $nexts = \@files;
        play $prevs->[-1];
    }
}

play glob("start/*");
open my $cmd, '-|', qw(python3 rfid-reader) or die $!;
while ( my $rfid = <$cmd> =~ s/[^0-9]//gr ) {
    create $rfid unless -d $rfid;
    handle $rfid;
}
close $cmd or die;
